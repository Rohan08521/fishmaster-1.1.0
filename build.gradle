plugins {
    id 'fabric-loom' version '1.10.5'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
}

version = project.mod_version
group = project.maven_group

base {
	archivesBaseName = project.archives_base_name
}

repositories {
	// These are the repositories where the dependencies are published
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	// This repository hosts the snapshot/dev builds of Fabric API
	maven {
		name = 'Fabric Snapshots'
		url = 'https://maven.fabricmc.net/develop/'
	}
	mavenCentral()
	maven {
		url = "https://repo.essential.gg/repository/maven-public"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"fishmaster" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API - using specific version
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.120.0+1.21.5"

	// Kotlin support with specific version
	modImplementation "net.fabricmc:fabric-language-kotlin:1.13.2+kotlin.2.1.20"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20"
	implementation "org.jetbrains.kotlin:kotlin-reflect:2.1.20"

	// Kotlin coroutines (useful for async operations)
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.7.3"

	// Elementa GUI library (from Essential's Maven)
	implementation(include("gg.essential:elementa:710"))
	// UniversalCraft (from Essential's Maven)
	modImplementation(include("gg.essential:universalcraft-1.21.5-fabric:427"))
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"minecraft_version": project.minecraft_version,
				"loader_version": project.loader_version
	}
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

// Kotlin compilation settings
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "21"
        freeCompilerArgs = freeCompilerArgs + [
            "-Xjsr305=strict",
            "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

// Ensure JAR-in-JAR for mods directory
jar {
	from('mods') {
		include '*.jar'
		into 'META-INF/jarinjar/'
	}

	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
	
	// Prevent duplicate files
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}

	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
