plugins {
	id 'fabric-loom' version '1.10.5'
	id 'maven-publish'
	id 'org.jetbrains.kotlin.jvm' version '2.0.21'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// Define versions for Elementa and UniversalCraft
def elementaVersion = "589"  // Latest stable version
def ucVersion = "598"        // Latest stable version

repositories {
	// These are the repositories where the dependencies are published
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	// This repository hosts the snapshot/dev builds of Fabric API
	maven {
		name = 'Fabric Snapshots'
		url = 'https://maven.fabricmc.net/develop/'
	}
	mavenCentral()
	// Essential Maven Repository for Elementa GUI library
	maven {
		name = "Essential"
		url = "https://repo.essential.gg/repository/maven-public/"
	}
	// Sponge Maven Repository (for Configurate)
	maven {
		name = "Sponge"
		url = "https://repo.spongepowered.org/maven/"
	}
	// JitPack for additional libraries
	maven {
		name = 'JitPack'
		url = 'https://jitpack.io'
	}
	// Local libs folder for custom dependencies
	flatDir {
		dirs 'libs'
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"fishmaster" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	// Add embedded JARs to the mod's nested JARs
	runConfigs.configureEach {
		// These libraries will be available during runtime
		// This makes sure they're also available in the development environment
		vmArg("-Dfabric.classPathGroups=${files("libs/elementa-710.jar", "libs/universalcraft-1.21.5-fabric-419.jar").asPath}")
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API - using specific version
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.120.0+1.21.5"

	// Kotlin support with specific version
	modImplementation "net.fabricmc:fabric-language-kotlin:1.13.2+kotlin.2.1.20"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20"
	implementation "org.jetbrains.kotlin:kotlin-reflect:2.1.20"

	// Kotlin coroutines (useful for async operations)
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.7.3"

	// Include the external libraries using Fabric Loom's include method
	// This embeds them in the final JAR
	modImplementation files("libs/elementa-710.jar")
	modImplementation files("libs/universalcraft-1.21.5-fabric-419.jar")
	include files("libs/elementa-710.jar")
	include files("libs/universalcraft-1.21.5-fabric-419.jar")

	// Mark all Kotlin stdlib dependencies as provided to avoid conflicts
	modCompileOnly "org.jetbrains.kotlin:kotlin-stdlib:2.1.20"
	modCompileOnly "org.jetbrains.kotlin:kotlin-stdlib-common:2.1.20"
	modCompileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20"
	modCompileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.1.20"
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"minecraft_version": project.minecraft_version,
				"loader_version": project.loader_version
	}
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

// Kotlin compilation settings
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "21"
        freeCompilerArgs += [
            "-Xjsr305=strict",
            "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	// Include all JARs from the libs directory
	from fileTree(dir: 'libs', include: '*.jar').collect { zipTree(it) }

	// Prevent duplicate files when including JARs
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Configure Shadow plugin for embedding JARs
shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set('dev')

    // Relocate the classes to avoid conflicts
    relocate 'gg.essential.elementa', 'rohan.fishmaster.shadow.elementa'
    relocate 'gg.essential.universal', 'rohan.fishmaster.shadow.universal'

    // Merge services files
    mergeServiceFiles()

    // Exclude certain files that might cause conflicts
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'module-info.class'

    // Set the duplicate handling strategy
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Make remapJar task depend on shadowJar and use its output
remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archiveFile)
}

// Skip the original jar task by making it a copy of shadowJar
jar {
    archiveClassifier.set("dev-slim")

    // Don't include all JARs in this task as shadowJar will handle it
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }

    enabled = false  // Disable the original jar task
}

// configure the maven publication
publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}

	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
